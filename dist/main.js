(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(537),o=n.n(r),a=n(645),c=n.n(a)()(o());c.push([e.id,"#header {\n  display: flex;\n  justify-content: center;\n  margin-top: 2em;\n}\n#form {\n  display: flex;\n  justify-content: center;\n  margin-top: 2em;\n}\n#current-weather-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 5em;\n}\n#hourly-weather-container {\n  overflow: auto;\n  white-space: nowrap;\n}\n.hourly-weather-card {\n  display: inline-block;\n  text-align: center;\n  padding: 14px;\n  text-decoration: none;\n}\nul {\n  padding: 0;\n  margin-top: 2em;\n}\n#daily-weather-container {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\nli {\n  list-style: none;\n  padding: 1em;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,uBAAuB;EACvB,eAAe;AACjB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,eAAe;AACjB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,eAAe;AACjB;AACA;EACE,cAAc;EACd,mBAAmB;AACrB;AACA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,aAAa;EACb,qBAAqB;AACvB;AACA;EACE,UAAU;EACV,eAAe;AACjB;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,sBAAsB;AACxB;AACA;EACE,gBAAgB;EAChB,YAAY;AACd",sourcesContent:["#header {\n  display: flex;\n  justify-content: center;\n  margin-top: 2em;\n}\n#form {\n  display: flex;\n  justify-content: center;\n  margin-top: 2em;\n}\n#current-weather-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 5em;\n}\n#hourly-weather-container {\n  overflow: auto;\n  white-space: nowrap;\n}\n.hourly-weather-card {\n  display: inline-block;\n  text-align: center;\n  padding: 14px;\n  text-decoration: none;\n}\nul {\n  padding: 0;\n  margin-top: 2em;\n}\n#daily-weather-container {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n}\nli {\n  list-style: none;\n  padding: 1em;\n}\n"],sourceRoot:""}]);const i=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(r)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(c[l]=!0)}for(var s=0;s<e.length;s++){var d=[].concat(e[s]);r&&c[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),c=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(c).concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},c=[],i=0;i<e.length;i++){var l=e[i],s=r.base?l[0]+r.base:l[0],d=a[s]||0,u="".concat(s," ").concat(d);a[s]=d+1;var p=n(u),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var h=o(m,r);r.byIndex=i,t.splice(i,0,{identifier:u,updater:h,references:1})}c.push(u)}return c}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var i=n(a[c]);t[i].references--}for(var l=r(e,o),s=0;s<a.length;s++){var d=n(a[s]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=l}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),r=n(795),o=n.n(r),a=n(569),c=n.n(a),i=n(565),l=n.n(i),s=n(216),d=n.n(s),u=n(589),p=n.n(u),m=n(426),h={};h.styleTagTransform=p(),h.setAttributes=l(),h.insert=c().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=d(),t()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;const A="746149ecb44c6b9cbab720bddd6eeee5";document.getElementById("container"),function(e){const t=document.getElementById("container"),n=document.createElement("div");n.id="header";const r=document.createElement("div");r.id="header-icon",r.textContent="X";const o=document.createElement("div");o.id="header-text",o.textContent="Weather",n.appendChild(r),n.appendChild(o),t.appendChild(n);const a=document.createElement("form");a.id="form";const c=document.createElement("input");c.id="search-input";const i=document.createElement("button");i.id="search-button",i.setAttribute("type","button"),a.appendChild(c),a.appendChild(i),t.appendChild(a);const l=document.createElement("div");l.id="current-weather-container";const s=document.createElement("div");s.id="city",s.textContent="Ogulin";const d=document.createElement("div");d.id="current-temperature",d.textContent="8",l.appendChild(s),l.appendChild(d),t.appendChild(l);const u=document.createElement("ul");u.id="hourly-weather-container";for(let e=0;e<=24;e++){const e=document.createElement("li");e.classList="hourly-weather-card";const t=document.createElement("div");t.classList="hourly-weather-time",e.appendChild(t);const n=document.createElement("div");n.classList="hourly-weather-temperature",e.appendChild(n);const r=document.createElement("img");r.classList="hourly-weather-icon",e.appendChild(r);const o=document.createElement("div");o.classList="hourly-weather-humidity",e.appendChild(o),u.appendChild(e)}t.appendChild(u);const p=document.createElement("ul");p.id="daily-weather-container";for(let e=0;e<=7;e++){const t=document.createElement("li");t.classList="daily-weather-card",t.textContent=e,p.appendChild(t)}t.appendChild(p)}();const f=document.getElementById("search-input"),y=document.getElementById("search-button");class C{constructor(e,t,n,r,o){this.currentTemp=e,this.currentHumidity=t,this.currentTime=n,this.hourly=r,this.daily=o}}y.addEventListener("click",(()=>{!async function(e){try{const t=await async function(e){try{const t=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e}&exclude=daily&APPID=${A}&units=metric`,{mode:"cors"});return await t.json()}catch{alert("ERROR")}}(e);console.log(t);const n=await async function(e,t){try{const n=await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${e}&lon=${t}&exclude=minutely&appid=${A}`,{mode:"cors"});return await n.json()}catch{alert("ERROR")}}(t.coord.lat,t.coord.lon);console.log(n);const r=new C(n.current.temp,n.current.humidity,n.current.dt,n.hourly,n.daily);!function(e,t){const n=document.getElementById("city"),r=document.getElementById("current-temperature"),o=document.getElementById("current-weather-container");n.textContent=t,r.textContent=e.currentTemp,o.appendChild(n),o.appendChild(r)}(r,t.name),function(e){let t=0;document.querySelectorAll(".hourly-weather-temperature").forEach((n=>{n.textContent=e.hourly[t].temp,t++}))}(r),function(e){let t=0;document.querySelectorAll(".hourly-weather-time").forEach((n=>{var r;n.textContent=(r=e.hourly[t].dt,new Date(1e3*r).getHours()),t++}))}(r),function(e){let t=0;document.querySelectorAll(".hourly-weather-icon").forEach((n=>{let r=e.hourly[t].weather[0].icon;n.src=`http://openweathermap.org/img/wn/${r}.png`,t++}))}(r),function(e){const t=document.querySelectorAll(".daily-weather-card");let n=0;t.forEach((t=>{t.textContent=e.daily[n].temp.day,n++}))}(r),console.log(r)}catch{console.log("processWeatherData Error!")}}(f.value)}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,