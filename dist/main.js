(()=>{"use strict";var e={426:(e,n,t)=>{t.d(n,{Z:()=>m});var r=t(537),a=t.n(r),o=t(645),i=t.n(o),c=t(667),d=t.n(c),l=new URL(t(926),t.b),s=new URL(t(87),t.b),u=i()(a()),A=d()(l),p=d()(s);u.push([e.id,"@font-face {\n  font-family: 'RedHatMono';\n  src: url("+A+");\n}\n\n#container {\n  font-family: 'RedHatMono';\n  display: flex;\n  flex-direction: column;\n  min-width: 30em;\n  min-height: 100%;\n  justify-content: center;\n  text-align: center;\n  \n}\n#header {\n  display: flex;\n  justify-content: center;\n  margin-top: 0.5em;\n  font-size: 1.7em;\n  padding-right: 1em;\n}\n#form {\n  display: flex;\n  justify-content: center;\n  margin-top: 2em;\n}\n#current-weather-container {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin-top: 2.5em;\n}\n#hourly-weather-container {\n  display: flex;\n  overflow: scroll;\n  white-space: nowrap;\n  overflow-y: hidden;\n}\n.hourly-weather-card {\n  display: inline-block;\n  text-align: center;\n  padding: 14px;\n  text-decoration: none;\n}\nul {\n  padding: 0;\n  margin-top: 2em;\n}\n#daily-weather-container {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  height: 30em;\n}\nli {\n  list-style: none;\n  padding: 1em;\n}\n.daily-weather-card {\n  display: flex;\n}\n.daily-weather-item {\n  display: flex;\n  margin: 0em 2em 0em 2em;\n  width: 2em;\n}\n#header {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n#search-input {\n  background-color: rgba(238, 238, 238, 0.548);\n  border-color: transparent;\n  outline: none;\n  border-radius: 5px;\n}\n#search-button {\n  background: url("+p+") no-repeat;\n  background-size: 100%;\n  padding: 10px;\n  border: none; /* Prevent double borders */\n  cursor: pointer;\n}\n#search-button:hover {\n  background-size: 110%;\n}\n.daily-weather-humidity {\n  font-size: 0.7em;\n  padding: 5px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,yBAAyB;EACzB,4CAA4C;AAC9C;;AAEA;EACE,yBAAyB;EACzB,aAAa;EACb,sBAAsB;EACtB,eAAe;EACf,gBAAgB;EAChB,uBAAuB;EACvB,kBAAkB;;AAEpB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,iBAAiB;EACjB,gBAAgB;EAChB,kBAAkB;AACpB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,eAAe;AACjB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,sBAAsB;EACtB,iBAAiB;AACnB;AACA;EACE,aAAa;EACb,gBAAgB;EAChB,mBAAmB;EACnB,kBAAkB;AACpB;AACA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,aAAa;EACb,qBAAqB;AACvB;AACA;EACE,UAAU;EACV,eAAe;AACjB;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,sBAAsB;EACtB,YAAY;AACd;AACA;EACE,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,aAAa;AACf;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,UAAU;AACZ;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,uBAAuB;AACzB;AACA;EACE,4CAA4C;EAC5C,yBAAyB;EACzB,aAAa;EACb,kBAAkB;AACpB;AACA;EACE,6DAA8C;EAC9C,qBAAqB;EACrB,aAAa;EACb,YAAY,EAAE,2BAA2B;EACzC,eAAe;AACjB;AACA;EACE,qBAAqB;AACvB;AACA;EACE,gBAAgB;EAChB,YAAY;AACd",sourcesContent:["@font-face {\n  font-family: 'RedHatMono';\n  src: url(./RedHatMono-VariableFont_wght.ttf);\n}\n\n#container {\n  font-family: 'RedHatMono';\n  display: flex;\n  flex-direction: column;\n  min-width: 30em;\n  min-height: 100%;\n  justify-content: center;\n  text-align: center;\n  \n}\n#header {\n  display: flex;\n  justify-content: center;\n  margin-top: 0.5em;\n  font-size: 1.7em;\n  padding-right: 1em;\n}\n#form {\n  display: flex;\n  justify-content: center;\n  margin-top: 2em;\n}\n#current-weather-container {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin-top: 2.5em;\n}\n#hourly-weather-container {\n  display: flex;\n  overflow: scroll;\n  white-space: nowrap;\n  overflow-y: hidden;\n}\n.hourly-weather-card {\n  display: inline-block;\n  text-align: center;\n  padding: 14px;\n  text-decoration: none;\n}\nul {\n  padding: 0;\n  margin-top: 2em;\n}\n#daily-weather-container {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  height: 30em;\n}\nli {\n  list-style: none;\n  padding: 1em;\n}\n.daily-weather-card {\n  display: flex;\n}\n.daily-weather-item {\n  display: flex;\n  margin: 0em 2em 0em 2em;\n  width: 2em;\n}\n#header {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n#search-input {\n  background-color: rgba(238, 238, 238, 0.548);\n  border-color: transparent;\n  outline: none;\n  border-radius: 5px;\n}\n#search-button {\n  background: url('./search-icon.png') no-repeat;\n  background-size: 100%;\n  padding: 10px;\n  border: none; /* Prevent double borders */\n  cursor: pointer;\n}\n#search-button:hover {\n  background-size: 110%;\n}\n.daily-weather-humidity {\n  font-size: 0.7em;\n  padding: 5px;\n}"],sourceRoot:""}]);const m=u},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",r=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),r&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),r&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(i[d]=!0)}for(var l=0;l<e.length;l++){var s=[].concat(e[l]);r&&i[s[0]]||(void 0!==o&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=o),t&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=t):s[2]=t),a&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=a):s[4]="".concat(a)),n.push(s))}},n}},667:e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),i=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,r=0;r<n.length;r++)if(n[r].identifier===e){t=r;break}return t}function r(e,r){for(var o={},i=[],c=0;c<e.length;c++){var d=e[c],l=r.base?d[0]+r.base:d[0],s=o[l]||0,u="".concat(l," ").concat(s);o[l]=s+1;var A=t(u),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)n[A].references++,n[A].updater(p);else{var m=a(p,r);r.byIndex=c,n.splice(c,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function a(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var c=t(o[i]);n[c].references--}for(var d=r(e,a),l=0;l<o.length;l++){var s=t(o[l]);0===n[s].references&&(n[s].updater(),n.splice(s,1))}o=d}}},569:e=>{var n={};e.exports=function(e,t){var r=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var a=void 0!==t.layer;a&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,a&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(r,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},926:(e,n,t)=>{e.exports=t.p+"6b296ef086158a837052.ttf"},87:(e,n,t)=>{e.exports=t.p+"afde00ab19b32864cdd8.png"}},n={};function t(r){var a=n[r];if(void 0!==a)return a.exports;var o=n[r]={id:r,exports:{}};return e[r](o,o.exports,t),o.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,(()=>{var e=t(379),n=t.n(e),r=t(795),a=t.n(r),o=t(569),i=t.n(o),c=t(565),d=t.n(c),l=t(216),s=t.n(l),u=t(589),A=t.n(u),p=t(426),m={};m.styleTagTransform=A(),m.setAttributes=d(),m.insert=i().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=s(),n()(p.Z,m),p.Z&&p.Z.locals&&p.Z.locals;const h="746149ecb44c6b9cbab720bddd6eeee5";document.getElementById("container"),function(){const e=document.getElementById("container"),n=document.createElement("div");n.id="header";const t=document.createElement("img");t.id="header-icon",t.textContent="X";const r=document.createElement("div");r.id="header-text",r.textContent="Weather",n.appendChild(t),n.appendChild(r),e.appendChild(n);const a=document.createElement("form");a.id="form";const o=document.createElement("input");o.id="search-input";const i=document.createElement("button");i.id="search-button",i.setAttribute("type","button"),a.appendChild(o),a.appendChild(i),e.appendChild(a);const c=document.createElement("div");c.id="current-weather-container";const d=document.createElement("div");d.id="city";const l=document.createElement("div");l.id="current-forecast";const s=document.createElement("div");s.id="current-temperature",c.appendChild(d),c.appendChild(l),c.appendChild(s),e.appendChild(c);const u=document.createElement("ul");u.id="hourly-weather-container";for(let e=0;e<=24;e++){const e=document.createElement("li");e.classList="hourly-weather-card";const n=document.createElement("div");n.classList="hourly-weather-time",e.appendChild(n);const t=document.createElement("div");t.classList="hourly-weather-temperature",e.appendChild(t);const r=document.createElement("img");r.classList="hourly-weather-icon",e.appendChild(r);const a=document.createElement("div");a.classList="hourly-weather-humidity",e.appendChild(a),u.appendChild(e)}e.appendChild(u);const A=document.createElement("ul");A.id="daily-weather-container";for(let e=0;e<7;e++){const e=document.createElement("li");e.classList="daily-weather-card";const n=document.createElement("div");n.classList="daily-weather-day",n.classList.add("daily-weather-item"),e.appendChild(n);const t=document.createElement("div");t.classList="daily-weather-humidity",t.classList.add("daily-weather-item"),e.appendChild(t);const r=document.createElement("img");r.classList="daily-weather-icon",r.classList.add("daily-weather-item"),e.appendChild(r);const a=document.createElement("div");a.classList="daily-weather-temperature",a.classList.add("daily-weather-item"),e.appendChild(a),A.appendChild(e)}e.appendChild(A)}();const y=document.getElementById("search-input"),f=document.getElementById("search-button");y.addEventListener("keydown",(e=>{"Enter"===e.key&&(e.preventDefault(),f.click())}));class C{constructor(e,n,t,r,a){this.currentTemp=e,this.currentHumidity=n,this.currentTime=t,this.hourly=r,this.daily=a}}async function g(e){try{const n=await async function(e){try{const n=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&exclude=daily&APPID=${h}&units=metric`,{mode:"cors"});return await n.json()}catch{alert("ERROR")}}(e);console.log(n);const t=await async function(e,n){try{const t=await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${e}&lon=${n}&units=metric&exclude=minutely&appid=${h}`,{mode:"cors"});return await t.json()}catch{alert("ERROR")}}(n.coord.lat,n.coord.lon);console.log(t);const r=new C(t.current.temp,t.current.humidity,t.current.dt,t.hourly,t.daily);!function(e){const n=document.getElementById("header-icon"),t=e.weather[0].icon;n.src=`https://openweathermap.org/img/wn/${t}.png`}(n),function(e){"Clouds"===e.weather[0].main?document.body.style.backgroundImage="linear-gradient(#797C87, #ACB7BD)":"Clear"===e.weather[0].main?document.body.style.backgroundImage="linear-gradient(#51A4DB, #73BAE1)":"Snow"===e.weather[0].main?document.body.style.backgroundImage="linear-gradient(#9598a1, #ACB7BD)":(e.weather[0].main,document.body.style.backgroundImage="linear-gradient(#7497AB, #4F718A)")}(n),function(e,n){const t=document.getElementById("city"),r=document.getElementById("current-temperature"),a=document.getElementById("current-forecast");t.textContent=n,a.textContent=e.weather[0].main,r.textContent=Math.round(e.main.temp)+"°"}(n,n.name),function(e){let n=0;document.querySelectorAll(".hourly-weather-temperature").forEach((t=>{t.textContent=Math.round(e.hourly[n].temp)+"°",n++}))}(r),function(e){let n=0;document.querySelectorAll(".hourly-weather-time").forEach((t=>{var r;t.textContent=(r=e.hourly[n].dt,new Date(1e3*r).toLocaleString("en-US",{hour:"numeric",hour12:!0})),n++}))}(r),function(e){let n=0;document.querySelectorAll(".hourly-weather-icon").forEach((t=>{const r=e.hourly[n].weather[0].icon;t.src=`https://openweathermap.org/img/wn/${r}.png`,n++}))}(r),function(e){let n=0;document.querySelectorAll(".hourly-weather-humidity").forEach((t=>{t.textContent=e.hourly[n].humidity+"%",n++}))}(r),function(e){const n=document.querySelectorAll(".daily-weather-temperature");let t=0;n.forEach((n=>{n.textContent=Math.round(e.daily[t].temp.day)+"°",t++}))}(r),function(e){const n=document.querySelectorAll(".daily-weather-day");let t=0;n.forEach((n=>{n.textContent=function(e){const n=new Date(1e3*e);return new Intl.DateTimeFormat("en-US",{weekday:"long"}).format(n)}(e.daily[t].dt),t++}))}(r),function(e){const n=document.querySelectorAll(".daily-weather-humidity");let t=0;n.forEach((n=>{n.textContent=e.daily[t].humidity+"%",t++}))}(r),function(e){const n=document.querySelectorAll(".daily-weather-icon");let t=0;n.forEach((n=>{const r=e.daily[t].weather[0].icon;n.src=`https://openweathermap.org/img/wn/${r}.png`,t++}))}(r),console.log(r)}catch{console.log("processWeatherData Error!")}}f.addEventListener("click",(()=>{const e=document.getElementById("form");g(y.value),e.reset()})),g("London")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,