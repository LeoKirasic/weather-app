(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>c});var a=n(537),r=n.n(a),o=n(645),i=n.n(o)()(r());i.push([e.id,"#container {\n  display: flex;\n  flex-direction: column;\n  min-width: 30em;\n  min-height: 100%;\n}\n#header {\n  display: flex;\n  justify-content: center;\n  margin-top: 2em;\n}\n#form {\n  display: flex;\n  justify-content: center;\n  margin-top: 2em;\n}\n#current-weather-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 5em;\n}\n#hourly-weather-container {\n  display: flex;\n  overflow: scroll;\n  white-space: nowrap;\n}\n.hourly-weather-card {\n  display: inline-block;\n  text-align: center;\n  padding: 14px;\n  text-decoration: none;\n}\nul {\n  padding: 0;\n  margin-top: 2em;\n}\n#daily-weather-container {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  height: 30em;\n}\nli {\n  list-style: none;\n  padding: 1em;\n}\n.daily-weather-card {\n  display: flex;\n  border: 1px solid black;\n}\n.daily-weather-item {\n  display: flex;\n  margin: 0em 2em 0em 2em;\n  width: 2em;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,eAAe;EACf,gBAAgB;AAClB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,eAAe;AACjB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,eAAe;AACjB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,eAAe;AACjB;AACA;EACE,aAAa;EACb,gBAAgB;EAChB,mBAAmB;AACrB;AACA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,aAAa;EACb,qBAAqB;AACvB;AACA;EACE,UAAU;EACV,eAAe;AACjB;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,sBAAsB;EACtB,YAAY;AACd;AACA;EACE,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,aAAa;EACb,uBAAuB;AACzB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,UAAU;AACZ",sourcesContent:["#container {\n  display: flex;\n  flex-direction: column;\n  min-width: 30em;\n  min-height: 100%;\n}\n#header {\n  display: flex;\n  justify-content: center;\n  margin-top: 2em;\n}\n#form {\n  display: flex;\n  justify-content: center;\n  margin-top: 2em;\n}\n#current-weather-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 5em;\n}\n#hourly-weather-container {\n  display: flex;\n  overflow: scroll;\n  white-space: nowrap;\n}\n.hourly-weather-card {\n  display: inline-block;\n  text-align: center;\n  padding: 14px;\n  text-decoration: none;\n}\nul {\n  padding: 0;\n  margin-top: 2em;\n}\n#daily-weather-container {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  height: 30em;\n}\nli {\n  list-style: none;\n  padding: 1em;\n}\n.daily-weather-card {\n  display: flex;\n  border: 1px solid black;\n}\n.daily-weather-item {\n  display: flex;\n  margin: 0em 2em 0em 2em;\n  width: 2em;\n}\n"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,r,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(a)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(i[l]=!0)}for(var d=0;d<e.length;d++){var s=[].concat(e[d]);a&&i[s[0]]||(void 0!==o&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=o),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),r&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=r):s[4]="".concat(r)),t.push(s))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),o="/*# ".concat(r," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,a=0;a<t.length;a++)if(t[a].identifier===e){n=a;break}return n}function a(e,a){for(var o={},i=[],c=0;c<e.length;c++){var l=e[c],d=a.base?l[0]+a.base:l[0],s=o[d]||0,u="".concat(d," ").concat(s);o[d]=s+1;var m=n(u),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==m)t[m].references++,t[m].updater(p);else{var h=r(p,a);a.byIndex=c,t.splice(c,0,{identifier:u,updater:h,references:1})}i.push(u)}return i}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var o=a(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var c=n(o[i]);t[c].references--}for(var l=a(e,r),d=0;d<o.length;d++){var s=n(o[d]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}o=l}}},569:e=>{var t={};e.exports=function(e,n){var a=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,r&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(a,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(a){var r=t[a];if(void 0!==r)return r.exports;var o=t[a]={id:a,exports:{}};return e[a](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),a=n(795),r=n.n(a),o=n(569),i=n.n(o),c=n(565),l=n.n(c),d=n(216),s=n.n(d),u=n(589),m=n.n(u),p=n(426),h={};h.styleTagTransform=m(),h.setAttributes=l(),h.insert=i().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=s(),t()(p.Z,h),p.Z&&p.Z.locals&&p.Z.locals;const A="746149ecb44c6b9cbab720bddd6eeee5",y=document.getElementById("container");!function(e){const t=document.getElementById("container"),n=document.createElement("div");n.id="header";const a=document.createElement("div");a.id="header-icon",a.textContent="X";const r=document.createElement("div");r.id="header-text",r.textContent="Weather",n.appendChild(a),n.appendChild(r),t.appendChild(n);const o=document.createElement("form");o.id="form";const i=document.createElement("input");i.id="search-input";const c=document.createElement("button");c.id="search-button",c.setAttribute("type","button"),o.appendChild(i),o.appendChild(c),t.appendChild(o);const l=document.createElement("div");l.id="current-weather-container";const d=document.createElement("div");d.id="city",d.textContent="Ogulin";const s=document.createElement("div");s.id="current-temperature",s.textContent="8",l.appendChild(d),l.appendChild(s),t.appendChild(l);const u=document.createElement("ul");u.id="hourly-weather-container";for(let e=0;e<=24;e++){const e=document.createElement("li");e.classList="hourly-weather-card";const t=document.createElement("div");t.classList="hourly-weather-time",e.appendChild(t);const n=document.createElement("div");n.classList="hourly-weather-temperature",e.appendChild(n);const a=document.createElement("img");a.classList="hourly-weather-icon",e.appendChild(a);const r=document.createElement("div");r.classList="hourly-weather-humidity",e.appendChild(r),u.appendChild(e)}t.appendChild(u);const m=document.createElement("ul");m.id="daily-weather-container";for(let e=0;e<7;e++){const e=document.createElement("li");e.classList="daily-weather-card";const t=document.createElement("div");t.classList="daily-weather-day",t.classList.add("daily-weather-item"),e.appendChild(t);const n=document.createElement("div");n.classList="daily-weather-humidity",n.classList.add("daily-weather-item"),e.appendChild(n);const a=document.createElement("img");a.classList="daily-weather-icon",a.classList.add("daily-weather-item"),e.appendChild(a);const r=document.createElement("div");r.classList="daily-weather-temperature",r.classList.add("daily-weather-item"),e.appendChild(r),m.appendChild(e)}t.appendChild(m)}();const f=document.getElementById("search-input"),C=document.getElementById("search-button");f.addEventListener("keydown",(e=>{"Enter"===e.key&&(e.preventDefault(),C.click())}));class E{constructor(e,t,n,a,r){this.currentTemp=e,this.currentHumidity=t,this.currentTime=n,this.hourly=a,this.daily=r}}async function g(e){try{const t=await async function(e){try{const t=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&exclude=daily&APPID=${A}&units=metric`,{mode:"cors"});return await t.json()}catch{alert("ERROR")}}(e);console.log(t);const n=await async function(e,t){try{const n=await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${e}&lon=${t}&units=metric&exclude=minutely&appid=${A}`,{mode:"cors"});return await n.json()}catch{alert("ERROR")}}(t.coord.lat,t.coord.lon);console.log(n);const a=new E(n.current.temp,n.current.humidity,n.current.dt,n.hourly,n.daily);!function(e){"Clouds"===e.weather[0].main?y.style.backgroundImage="linear-gradient(#797C87, #ACB7BD)":"Clear"===e.weather[0].main?y.style.backgroundImage="linear-gradient(#51A4DB, #73BAE1)":"Snow"===e.weather[0].main?y.style.backgroundImage="linear-gradient(#9598a1, #ACB7BD)":(e.weather[0].main,y.style.backgroundImage="linear-gradient(#7497AB, #4F718A)")}(t),function(e,t){const n=document.getElementById("city"),a=document.getElementById("current-temperature"),r=document.getElementById("current-weather-container");n.textContent=t,a.textContent=Math.round(e.currentTemp)+"°",r.appendChild(n),r.appendChild(a)}(a,t.name),function(e){let t=0;document.querySelectorAll(".hourly-weather-temperature").forEach((n=>{n.textContent=Math.round(e.hourly[t].temp)+"°",t++}))}(a),function(e){let t=0;document.querySelectorAll(".hourly-weather-time").forEach((n=>{var a;n.textContent=(a=e.hourly[t].dt,new Date(1e3*a).toLocaleString("en-US",{hour:"numeric",hour12:!0})),t++}))}(a),function(e){let t=0;document.querySelectorAll(".hourly-weather-icon").forEach((n=>{const a=e.hourly[t].weather[0].icon;n.src=`https://openweathermap.org/img/wn/${a}.png`,t++}))}(a),function(e){let t=0;document.querySelectorAll(".hourly-weather-humidity").forEach((n=>{n.textContent=e.hourly[t].humidity+"%",t++}))}(a),function(e){const t=document.querySelectorAll(".daily-weather-temperature");let n=0;t.forEach((t=>{t.textContent=Math.round(e.daily[n].temp.day)+"°",n++}))}(a),function(e){const t=document.querySelectorAll(".daily-weather-day");let n=0;t.forEach((t=>{t.textContent=function(e){const t=new Date(1e3*e);return new Intl.DateTimeFormat("en-US",{weekday:"long"}).format(t)}(e.daily[n].dt),n++}))}(a),function(e){const t=document.querySelectorAll(".daily-weather-humidity");let n=0;t.forEach((t=>{t.textContent=e.daily[n].humidity+"%",n++}))}(a),function(e){const t=document.querySelectorAll(".daily-weather-icon");let n=0;t.forEach((t=>{const a=e.daily[n].weather[0].icon;t.src=`https://openweathermap.org/img/wn/${a}.png`,n++}))}(a),console.log(a)}catch{console.log("processWeatherData Error!")}}C.addEventListener("click",(()=>{g(f.value)})),g("London")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,