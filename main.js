(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(537),a=n.n(r),o=n(645),c=n.n(o)()(a());c.push([e.id,"#header {\n  display: flex;\n  justify-content: center;\n  margin-top: 2em;\n}\n#form {\n  display: flex;\n  justify-content: center;\n  margin-top: 2em;\n}\n#current-weather-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 5em;\n}\n#hourly-weather-container {\n  display: flex;\n  overflow: scroll;\n  white-space: nowrap;\n}\n.hourly-weather-card {\n  display: inline-block;\n  text-align: center;\n  padding: 14px;\n  text-decoration: none;\n}\nul {\n  padding: 0;\n  margin-top: 2em;\n}\n#daily-weather-container {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  min-width: 30em;\n  height: 30em;\n}\nli {\n  list-style: none;\n  padding: 1em;\n}\n.daily-weather-card {\n  display: flex;\n  border: 1px solid black;\n}\n.daily-weather-item {\n  display: flex;\n  margin: 0em 2em 0em 2em;\n  width: 2em;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,uBAAuB;EACvB,eAAe;AACjB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,eAAe;AACjB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,eAAe;AACjB;AACA;EACE,aAAa;EACb,gBAAgB;EAChB,mBAAmB;AACrB;AACA;EACE,qBAAqB;EACrB,kBAAkB;EAClB,aAAa;EACb,qBAAqB;AACvB;AACA;EACE,UAAU;EACV,eAAe;AACjB;AACA;EACE,aAAa;EACb,mBAAmB;EACnB,sBAAsB;EACtB,eAAe;EACf,YAAY;AACd;AACA;EACE,gBAAgB;EAChB,YAAY;AACd;AACA;EACE,aAAa;EACb,uBAAuB;AACzB;AACA;EACE,aAAa;EACb,uBAAuB;EACvB,UAAU;AACZ",sourcesContent:["#header {\n  display: flex;\n  justify-content: center;\n  margin-top: 2em;\n}\n#form {\n  display: flex;\n  justify-content: center;\n  margin-top: 2em;\n}\n#current-weather-container {\n  display: flex;\n  justify-content: center;\n  margin-top: 5em;\n}\n#hourly-weather-container {\n  display: flex;\n  overflow: scroll;\n  white-space: nowrap;\n}\n.hourly-weather-card {\n  display: inline-block;\n  text-align: center;\n  padding: 14px;\n  text-decoration: none;\n}\nul {\n  padding: 0;\n  margin-top: 2em;\n}\n#daily-weather-container {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  min-width: 30em;\n  height: 30em;\n}\nli {\n  list-style: none;\n  padding: 1em;\n}\n.daily-weather-card {\n  display: flex;\n  border: 1px solid black;\n}\n.daily-weather-item {\n  display: flex;\n  margin: 0em 2em 0em 2em;\n  width: 2em;\n}\n"],sourceRoot:""}]);const i=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(r)for(var i=0;i<this.length;i++){var l=this[i][0];null!=l&&(c[l]=!0)}for(var d=0;d<e.length;d++){var s=[].concat(e[d]);r&&c[s[0]]||(void 0!==o&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=o),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),a&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=a):s[4]="".concat(a)),t.push(s))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */"),c=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(c).concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},c=[],i=0;i<e.length;i++){var l=e[i],d=r.base?l[0]+r.base:l[0],s=o[d]||0,u="".concat(d," ").concat(s);o[d]=s+1;var p=n(u),m={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var h=a(m,r);r.byIndex=i,t.splice(i,0,{identifier:u,updater:h,references:1})}c.push(u)}return c}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var c=0;c<o.length;c++){var i=n(o[c]);t[i].references--}for(var l=r(e,a),d=0;d<o.length;d++){var s=n(o[d]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}o=l}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e=n(379),t=n.n(e),r=n(795),a=n.n(r),o=n(569),c=n.n(o),i=n(565),l=n.n(i),d=n(216),s=n.n(d),u=n(589),p=n.n(u),m=n(426),h={};h.styleTagTransform=p(),h.setAttributes=l(),h.insert=c().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=s(),t()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;const A="746149ecb44c6b9cbab720bddd6eeee5";document.getElementById("container"),function(e){const t=document.getElementById("container"),n=document.createElement("div");n.id="header";const r=document.createElement("div");r.id="header-icon",r.textContent="X";const a=document.createElement("div");a.id="header-text",a.textContent="Weather",n.appendChild(r),n.appendChild(a),t.appendChild(n);const o=document.createElement("form");o.id="form";const c=document.createElement("input");c.id="search-input";const i=document.createElement("button");i.id="search-button",i.setAttribute("type","button"),o.appendChild(c),o.appendChild(i),t.appendChild(o);const l=document.createElement("div");l.id="current-weather-container";const d=document.createElement("div");d.id="city",d.textContent="Ogulin";const s=document.createElement("div");s.id="current-temperature",s.textContent="8",l.appendChild(d),l.appendChild(s),t.appendChild(l);const u=document.createElement("ul");u.id="hourly-weather-container";for(let e=0;e<=24;e++){const e=document.createElement("li");e.classList="hourly-weather-card";const t=document.createElement("div");t.classList="hourly-weather-time",e.appendChild(t);const n=document.createElement("div");n.classList="hourly-weather-temperature",e.appendChild(n);const r=document.createElement("img");r.classList="hourly-weather-icon",e.appendChild(r);const a=document.createElement("div");a.classList="hourly-weather-humidity",e.appendChild(a),u.appendChild(e)}t.appendChild(u);const p=document.createElement("ul");p.id="daily-weather-container";for(let e=0;e<7;e++){const e=document.createElement("li");e.classList="daily-weather-card";const t=document.createElement("div");t.classList="daily-weather-day",t.classList.add("daily-weather-item"),e.appendChild(t);const n=document.createElement("div");n.classList="daily-weather-humidity",n.classList.add("daily-weather-item"),e.appendChild(n);const r=document.createElement("img");r.classList="daily-weather-icon",r.classList.add("daily-weather-item"),e.appendChild(r);const a=document.createElement("div");a.classList="daily-weather-temperature",a.classList.add("daily-weather-item"),e.appendChild(a),p.appendChild(e)}t.appendChild(p)}();const y=document.getElementById("search-input"),f=document.getElementById("search-button");y.addEventListener("keydown",(e=>{"Enter"===e.key&&(e.preventDefault(),f.click())}));class C{constructor(e,t,n,r,a){this.currentTemp=e,this.currentHumidity=t,this.currentTime=n,this.hourly=r,this.daily=a}}async function E(e){try{const t=await async function(e){try{const t=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e}&exclude=daily&APPID=${A}&units=metric`,{mode:"cors"});return await t.json()}catch{alert("ERROR")}}(e);console.log(t);const n=await async function(e,t){try{const n=await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${e}&lon=${t}&units=metric&exclude=minutely&appid=${A}`,{mode:"cors"});return await n.json()}catch{alert("ERROR")}}(t.coord.lat,t.coord.lon);console.log(n);const r=new C(n.current.temp,n.current.humidity,n.current.dt,n.hourly,n.daily);!function(e,t){const n=document.getElementById("city"),r=document.getElementById("current-temperature"),a=document.getElementById("current-weather-container");n.textContent=t,r.textContent=Math.round(e.currentTemp)+"Â°",a.appendChild(n),a.appendChild(r)}(r,t.name),function(e){let t=0;document.querySelectorAll(".hourly-weather-temperature").forEach((n=>{n.textContent=Math.round(e.hourly[t].temp)+"Â°",t++}))}(r),function(e){let t=0;document.querySelectorAll(".hourly-weather-time").forEach((n=>{var r;n.textContent=(r=e.hourly[t].dt,new Date(1e3*r).toLocaleString("en-US",{hour:"numeric",hour12:!0})),t++}))}(r),function(e){let t=0;document.querySelectorAll(".hourly-weather-icon").forEach((n=>{const r=e.hourly[t].weather[0].icon;n.src=`http://openweathermap.org/img/wn/${r}.png`,t++}))}(r),function(e){let t=0;document.querySelectorAll(".hourly-weather-humidity").forEach((n=>{n.textContent=e.hourly[t].humidity+"%",t++}))}(r),function(e){const t=document.querySelectorAll(".daily-weather-temperature");let n=0;t.forEach((t=>{t.textContent=Math.round(e.daily[n].temp.day)+"Â°",n++}))}(r),function(e){const t=document.querySelectorAll(".daily-weather-day");let n=0;t.forEach((t=>{t.textContent=function(e){const t=new Date(1e3*e);return new Intl.DateTimeFormat("en-US",{weekday:"long"}).format(t)}(e.daily[n].dt),n++}))}(r),function(e){const t=document.querySelectorAll(".daily-weather-humidity");let n=0;t.forEach((t=>{t.textContent=e.daily[n].humidity+"%",n++}))}(r),function(e){const t=document.querySelectorAll(".daily-weather-icon");let n=0;t.forEach((t=>{const r=e.daily[n].weather[0].icon;t.src=`http://openweathermap.org/img/wn/${r}.png`,n++}))}(r),console.log(r)}catch{console.log("processWeatherData Error!")}}f.addEventListener("click",(()=>{E(y.value)})),E("London")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,